//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IService {
    headApiHeartbeat(): Observable<void>;
}

@Injectable()
export class Service implements IService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    headApiHeartbeat(): Observable<void> {
        let url_ = this.baseUrl + "/api/heartbeat";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("head", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processHeadApiHeartbeat(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processHeadApiHeartbeat(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processHeadApiHeartbeat(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(null as any);
    }
}

export interface IAccountsService {
    /**
     * @return Registers the new user
     */
    registerUser(command: RegisterCommand): Observable<RegistrationResponse>;
    /**
     * @return Logins the user
     */
    login(command: LoginCommand): Observable<AuthenticationResponse>;
    /**
     * @return Logins the user externally
     */
    externalLogin(command: ExternalLoginCommand): Observable<AuthenticationResponse>;
    /**
     * @return Forgot password
     */
    forgotPassword(command: ForgotPasswordCommand): Observable<string>;
    /**
     * @return Reset password
     */
    resetPassword(command: ResetPasswordCommand): Observable<boolean>;
    /**
     * @return Two-step verification
     */
    twoStepVerification(command: TwoStepVerificationCommand): Observable<TokenResponse>;
    /**
     * @param email (optional) 
     * @param token (optional) 
     * @return Email confirmation
     */
    emailConfirmation(email?: string | null | undefined, token?: string | null | undefined): Observable<boolean>;
}

@Injectable()
export class AccountsService implements IAccountsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Registers the new user
     */
    registerUser(command: RegisterCommand): Observable<RegistrationResponse> {
        let url_ = this.baseUrl + "/api/accounts/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegistrationResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegistrationResponse>;
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<RegistrationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = RegistrationResponse.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RegistrationResponse>(null as any);
    }

    /**
     * @return Logins the user
     */
    login(command: LoginCommand): Observable<AuthenticationResponse> {
        let url_ = this.baseUrl + "/api/accounts/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticationResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticationResponse>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthenticationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponse.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticationResponse>(null as any);
    }

    /**
     * @return Logins the user externally
     */
    externalLogin(command: ExternalLoginCommand): Observable<AuthenticationResponse> {
        let url_ = this.baseUrl + "/api/accounts/external-login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExternalLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExternalLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticationResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticationResponse>;
        }));
    }

    protected processExternalLogin(response: HttpResponseBase): Observable<AuthenticationResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = AuthenticationResponse.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticationResponse>(null as any);
    }

    /**
     * @return Forgot password
     */
    forgotPassword(command: ForgotPasswordCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/accounts/forgot-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    /**
     * @return Reset password
     */
    resetPassword(command: ResetPasswordCommand): Observable<boolean> {
        let url_ = this.baseUrl + "/api/accounts/reset-password";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    /**
     * @return Two-step verification
     */
    twoStepVerification(command: TwoStepVerificationCommand): Observable<TokenResponse> {
        let url_ = this.baseUrl + "/api/accounts/two-step-verification";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTwoStepVerification(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTwoStepVerification(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TokenResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TokenResponse>;
        }));
    }

    protected processTwoStepVerification(response: HttpResponseBase): Observable<TokenResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = TokenResponse.fromJS(resultData200, _mappings);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TokenResponse>(null as any);
    }

    /**
     * @param email (optional) 
     * @param token (optional) 
     * @return Email confirmation
     */
    emailConfirmation(email?: string | null | undefined, token?: string | null | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/accounts/email-confirmation?";
        if (email !== undefined && email !== null)
            url_ += "email=" + encodeURIComponent("" + email) + "&";
        if (token !== undefined && token !== null)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEmailConfirmation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEmailConfirmation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processEmailConfirmation(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }
}

export abstract class ResponseBase implements IResponseBase {
    appId!: number;
    errors!: string[];

    constructor(data?: IResponseBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.appId = _data["appId"];
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(item);
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ResponseBase | null {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ResponseBase' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appId"] = this.appId;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item);
        }
        return data;
    }
}

export interface IResponseBase {
    appId: number;
    errors: string[];
}

export class RegistrationResponse extends ResponseBase implements IRegistrationResponse {
    isSuccessful!: boolean;

    constructor(data?: IRegistrationResponse) {
        super(data);
    }

    override init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.isSuccessful = _data["isSuccessful"];
        }
    }

    static override fromJS(data: any, _mappings?: any): RegistrationResponse | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegistrationResponse>(data, _mappings, RegistrationResponse);
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccessful"] = this.isSuccessful;
        super.toJSON(data);
        return data;
    }
}

export interface IRegistrationResponse extends IResponseBase {
    isSuccessful: boolean;
}

export class RegisterCommand implements IRegisterCommand {
    email!: string;
    password!: string;
    clientUri!: string | undefined;

    constructor(data?: IRegisterCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.clientUri = _data["clientUri"];
        }
    }

    static fromJS(data: any, _mappings?: any): RegisterCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<RegisterCommand>(data, _mappings, RegisterCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["clientUri"] = this.clientUri;
        return data;
    }
}

export interface IRegisterCommand {
    email: string;
    password: string;
    clientUri: string | undefined;
}

export class AuthenticationResponse extends ResponseBase implements IAuthenticationResponse {
    isSuccessful!: boolean;
    errorMessage!: string | undefined;
    token!: string | undefined;
    is2StepVerificationRequired!: boolean;
    isLockedOut!: boolean;
    provider!: string | undefined;

    constructor(data?: IAuthenticationResponse) {
        super(data);
    }

    override init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.isSuccessful = _data["isSuccessful"];
            this.errorMessage = _data["errorMessage"];
            this.token = _data["token"];
            this.is2StepVerificationRequired = _data["is2StepVerificationRequired"];
            this.isLockedOut = _data["isLockedOut"];
            this.provider = _data["provider"];
        }
    }

    static override fromJS(data: any, _mappings?: any): AuthenticationResponse | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<AuthenticationResponse>(data, _mappings, AuthenticationResponse);
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccessful"] = this.isSuccessful;
        data["errorMessage"] = this.errorMessage;
        data["token"] = this.token;
        data["is2StepVerificationRequired"] = this.is2StepVerificationRequired;
        data["isLockedOut"] = this.isLockedOut;
        data["provider"] = this.provider;
        super.toJSON(data);
        return data;
    }
}

export interface IAuthenticationResponse extends IResponseBase {
    isSuccessful: boolean;
    errorMessage: string | undefined;
    token: string | undefined;
    is2StepVerificationRequired: boolean;
    isLockedOut: boolean;
    provider: string | undefined;
}

export class LoginCommand implements ILoginCommand {
    email!: string;
    password!: string;
    clientUri!: string | undefined;

    constructor(data?: ILoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.clientUri = _data["clientUri"];
        }
    }

    static fromJS(data: any, _mappings?: any): LoginCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<LoginCommand>(data, _mappings, LoginCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["clientUri"] = this.clientUri;
        return data;
    }
}

export interface ILoginCommand {
    email: string;
    password: string;
    clientUri: string | undefined;
}

export class ExternalLoginCommand implements IExternalLoginCommand {
    provider!: ExternalAuthProvider | undefined;
    idToken!: string | undefined;

    constructor(data?: IExternalLoginCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.provider = _data["provider"];
            this.idToken = _data["idToken"];
        }
    }

    static fromJS(data: any, _mappings?: any): ExternalLoginCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ExternalLoginCommand>(data, _mappings, ExternalLoginCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["provider"] = this.provider;
        data["idToken"] = this.idToken;
        return data;
    }
}

export interface IExternalLoginCommand {
    provider: ExternalAuthProvider | undefined;
    idToken: string | undefined;
}

export enum ExternalAuthProvider {
    Google = 0,
    Facebook = 1,
}

export class ForgotPasswordCommand implements IForgotPasswordCommand {
    email!: string;
    clientUri!: string | undefined;

    constructor(data?: IForgotPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.clientUri = _data["clientUri"];
        }
    }

    static fromJS(data: any, _mappings?: any): ForgotPasswordCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ForgotPasswordCommand>(data, _mappings, ForgotPasswordCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["clientUri"] = this.clientUri;
        return data;
    }
}

export interface IForgotPasswordCommand {
    email: string;
    clientUri: string | undefined;
}

export class ResetPasswordCommand implements IResetPasswordCommand {
    email!: string;
    password!: string;
    token!: string;

    constructor(data?: IResetPasswordCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.token = _data["token"];
        }
    }

    static fromJS(data: any, _mappings?: any): ResetPasswordCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<ResetPasswordCommand>(data, _mappings, ResetPasswordCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["token"] = this.token;
        return data;
    }
}

export interface IResetPasswordCommand {
    email: string;
    password: string;
    token: string;
}

export class TokenResponse extends ResponseBase implements ITokenResponse {
    isSuccessful!: boolean;
    token!: string | undefined;

    constructor(data?: ITokenResponse) {
        super(data);
    }

    override init(_data?: any, _mappings?: any) {
        super.init(_data);
        if (_data) {
            this.isSuccessful = _data["isSuccessful"];
            this.token = _data["token"];
        }
    }

    static override fromJS(data: any, _mappings?: any): TokenResponse | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<TokenResponse>(data, _mappings, TokenResponse);
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccessful"] = this.isSuccessful;
        data["token"] = this.token;
        super.toJSON(data);
        return data;
    }
}

export interface ITokenResponse extends IResponseBase {
    isSuccessful: boolean;
    token: string | undefined;
}

export class TwoStepVerificationCommand implements ITwoStepVerificationCommand {
    email!: string;
    token!: string;
    provider!: string;

    constructor(data?: ITwoStepVerificationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any, _mappings?: any) {
        if (_data) {
            this.email = _data["email"];
            this.token = _data["token"];
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any, _mappings?: any): TwoStepVerificationCommand | null {
        data = typeof data === 'object' ? data : {};
        return createInstance<TwoStepVerificationCommand>(data, _mappings, TwoStepVerificationCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["token"] = this.token;
        data["provider"] = this.provider;
        return data;
    }
}

export interface ITwoStepVerificationCommand {
    email: string;
    token: string;
    provider: string;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T | null {
  if (!mappings)
    mappings = [];
  if (!data)
    return null;

  const mappingIndexName = "__mappingIndex";
  if (data[mappingIndexName])
    return <T>mappings[data[mappingIndexName]].target;

  data[mappingIndexName] = mappings.length;

  let result: any = new type();
  mappings.push({ source: data, target: result });
  result.init(data, mappings);
  return result;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}