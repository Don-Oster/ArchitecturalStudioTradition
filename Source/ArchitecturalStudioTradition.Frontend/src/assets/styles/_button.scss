@import './_variables';

button:disabled {
  opacity: .5;
  pointer-events: none
}

.button-primary, .button-outline-primary {
  align-items: center;
  background-color: currentColor;
  border-color: currentColor;
  border-width: 1px;
  display: inline-flex;
  font-family: ArchitecturalStudio Tradition Font,sans-serif;
  font-size: 12px;
  font-weight: 300;
  justify-content: center;
  letter-spacing: .16em;
  line-height: 1;
  overflow: hidden;
  padding: .75rem 1rem;
  position: relative;
  text-transform: uppercase;
  white-space: nowrap;
  width: auto;

  &:before {
    $at-scale-x: 0;
    $at-bg-opacity: 1;
    background-color: rgba($at-light,$at-bg-opacity);
    bottom: 0;
    display: block;
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transform-origin: left;
    transition-duration: .3s;
    transition-property: all;
    transition-timing-function: cubic-bezier(.4,0,.2,1)
  }

  &:hover {
    &:before {
      $at-scale-x: 1
    }

    span {
      color: currentColor
    }
  }

  &:before, &:hover:before {
    content: $at-content;
    transform: translate($at-translate-x,$at-translate-y) rotate($at-rotate) skewX($at-skew-x) skewY($at-skew-y) scaleX($at-scale-x) scaleY($at-scale-y)
  }

  span {
    $at-text-opacity: 1;
    color: rgb(255 255 255/$at-text-opacity)
  }

  .Navigation & {
    .content-gray, .content-gray-light, &.content-gray, &.content-gray-light {
      span, span input, span input::-moz-placeholder, span input:-webkit-autofill, span textarea {
        $at-bg-opacity: 1;
        color: rgba($at-dark,$at-bg-opacity);
        -webkit-text-fill-color: $at-dark;
      }
    }
  }

  .content-gray, .content-gray-light, &.content-gray, &.content-gray-light {
    span, span input, span input::-moz-placeholder, span input:-webkit-autofill, span textarea {
      $at-text-opacity: 1;
      color: rgba($at-dark,$at-text-opacity);
      -webkit-text-fill-color: $at-dark;
    }
  }
}

.button-outline-primary {
  background-color: transparent;

  &:hover {
    span {
      color: rgb($at-background-color,255,255,255)
    }
  }

  &:before {
    background-color: currentColor;
  }
}

.button-outline-primary span, .button-primary span {
  z-index: 10
}

@media (min-width: $screen-medium) {
  .button-primary, .button-outline-primary {
    font-size: 14px
  }
}

@media (min-width: $screen-mobile) {
  .button-primary, .button-outline-primary {
    padding: .875rem 1.25rem
  }
}

.button-text-link {
  align-items: center;
  background-color: transparent;
  display: inline-flex;
  font-size: 16px;
  font-weight: 400;
  justify-content: center;
  line-height: 1;
  transition-duration: .3s;
  transition-property: color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,-webkit-backdrop-filter;
  transition-property: color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter;
  transition-property: color,background-color,border-color,text-decoration-color,fill,stroke,opacity,box-shadow,transform,filter,backdrop-filter,-webkit-backdrop-filter;
  transition-timing-function: cubic-bezier(.4,0,.2,1);
  white-space: nowrap;

  &:hover {
    opacity: .75
  }
}

@media (min-width: $screen-medium) {
  .button-large {
    font-size: 20px;
    padding: 1rem 2.5rem
  }
}

.button-radio {
  align-items: center;
  display: flex;
  flex: 1 1 0%;
  position: relative;

  &:before {
    border-color: currentColor;
    border-width: 1px;
    opacity: .5;
    position: relative
  }

  &:after {
    $at-scale-x: 0.6;
    $at-scale-y: 0.6;
    background-color: transparent;
    position: absolute;
    transition-duration: .2s;
    transition-property: transform;
    transition-timing-function: cubic-bezier(.4,0,.2,1);
    transition-timing-function: cubic-bezier(0,0,.2,1)
  }

  &:after, &:before {
    border-radius: 9999px;
    content: "";
    height: 1.25rem;
    width: 1.25rem
  }

  &:after {
    $at-scale-x: 0.7;
    $at-scale-y: 0.7;
    background-color: currentColor;
    content: ""
  }

  &.active:after, &:after {
    transform: translate($at-translate-x,$at-translate-y) rotate($at-rotate) skewX($at-skew-x) skewY($at-skew-y) scaleX($at-scale-x) scaleY($at-scale-y)
  }
}
