{"ast":null,"code":"import _classCallCheck from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { timer, fromEvent } from 'rxjs';\nimport { switchMap, retryWhen, tap, delay, debounceTime, startWith } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport * as i1 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\n/**\r\n * InjectionToken for specifing ConnectionService options.\r\n */\n\nvar ConnectionServiceOptionsToken = new InjectionToken('ConnectionServiceOptionsToken');\nvar ConnectionService = /*#__PURE__*/(function () {\n  var ConnectionService = /*#__PURE__*/function () {\n    function ConnectionService(http, options) {\n      _classCallCheck(this, ConnectionService);\n\n      this.http = http;\n      this.stateChangeEventEmitter = new EventEmitter();\n      this.currentState = {\n        hasInternetAccess: false,\n        hasNetworkConnection: window.navigator.onLine\n      };\n      this.serviceOptions = _.defaults({}, options, ConnectionService.DEFAULT_OPTIONS);\n      this.checkNetworkState();\n      this.checkInternetState();\n    }\n    /**\r\n     * Current ConnectionService options. Notice that changing values of the returned object has not effect on service execution.\r\n     * You should use \"updateOptions\" function.\r\n     */\n\n\n    _createClass(ConnectionService, [{\n      key: \"options\",\n      get: function get() {\n        return _.clone(this.serviceOptions);\n      }\n    }, {\n      key: \"checkInternetState\",\n      value: function checkInternetState() {\n        var _this = this;\n\n        if (!_.isNil(this.httpSubscription)) {\n          this.httpSubscription.unsubscribe();\n        }\n\n        if (this.serviceOptions.enableHeartbeat) {\n          this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval).pipe(switchMap(function () {\n            return _this.http[_this.serviceOptions.requestMethod](_this.serviceOptions.heartbeatUrl, {\n              responseType: 'text'\n            });\n          }), retryWhen(function (errors) {\n            return errors.pipe( // log error message\n            tap(function (val) {\n              console.error('Http error:', val);\n              _this.currentState.hasInternetAccess = false;\n\n              _this.emitEvent();\n            }), // restart after 5 seconds\n            delay(_this.serviceOptions.heartbeatRetryInterval));\n          })).subscribe(function (result) {\n            _this.currentState.hasInternetAccess = true;\n\n            _this.emitEvent();\n          });\n        } else {\n          this.currentState.hasInternetAccess = false;\n          this.emitEvent();\n        }\n      }\n    }, {\n      key: \"checkNetworkState\",\n      value: function checkNetworkState() {\n        var _this2 = this;\n\n        this.onlineSubscription = fromEvent(window, 'online').subscribe(function () {\n          _this2.currentState.hasNetworkConnection = true;\n\n          _this2.checkInternetState();\n\n          _this2.emitEvent();\n        });\n        this.offlineSubscription = fromEvent(window, 'offline').subscribe(function () {\n          _this2.currentState.hasNetworkConnection = false;\n\n          _this2.checkInternetState();\n\n          _this2.emitEvent();\n        });\n      }\n    }, {\n      key: \"emitEvent\",\n      value: function emitEvent() {\n        this.stateChangeEventEmitter.emit(this.currentState);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        try {\n          this.offlineSubscription.unsubscribe();\n          this.onlineSubscription.unsubscribe();\n          this.httpSubscription.unsubscribe();\n        } catch (e) {}\n      }\n      /**\r\n       * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\r\n       * function will not report current status of the connections when initially subscribed.\r\n       * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\r\n       */\n\n    }, {\n      key: \"monitor\",\n      value: function monitor() {\n        var reportCurrentState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        return reportCurrentState ? this.stateChangeEventEmitter.pipe(debounceTime(300), startWith(this.currentState)) : this.stateChangeEventEmitter.pipe(debounceTime(300));\n      }\n      /**\r\n       * Update options of the service. You could specify partial options object. Values that are not specified will use default / previous\r\n       * option values.\r\n       * @param options Partial option values.\r\n       */\n\n    }, {\n      key: \"updateOptions\",\n      value: function updateOptions(options) {\n        this.serviceOptions = _.defaults({}, options, this.serviceOptions);\n        this.checkInternetState();\n      }\n    }]);\n\n    return ConnectionService;\n  }();\n\n  ConnectionService.DEFAULT_OPTIONS = {\n    enableHeartbeat: true,\n    heartbeatUrl: '//httpstat.us/200',\n    heartbeatInterval: 30000,\n    heartbeatRetryInterval: 1000,\n    requestMethod: 'head'\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  ConnectionService.ɵfac = function ConnectionService_Factory(t) {\n    return new (t || ConnectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(ConnectionServiceOptionsToken, 8));\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ConnectionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ConnectionService,\n    factory: ConnectionService.ɵfac,\n    providedIn: 'root'\n  });\n  return ConnectionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ConnectionServiceModule = /*#__PURE__*/(function () {\n  var ConnectionServiceModule = /*#__PURE__*/_createClass(function ConnectionServiceModule() {\n    _classCallCheck(this, ConnectionServiceModule);\n  });\n\n  /** @nocollapse */\n\n  /** @nocollapse */\n  ConnectionServiceModule.ɵfac = function ConnectionServiceModule_Factory(t) {\n    return new (t || ConnectionServiceModule)();\n  };\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n\n  ConnectionServiceModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ConnectionServiceModule\n  });\n  /** @nocollapse */\n\n  /** @nocollapse */\n\n  ConnectionServiceModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ConnectionService],\n    imports: [[HttpClientModule]]\n  });\n  return ConnectionServiceModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of connection-service\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { ConnectionService, ConnectionServiceModule, ConnectionServiceOptionsToken }; //# sourceMappingURL=angular-connection-service.mjs.map","map":null,"metadata":{},"sourceType":"module"}