{"ast":null,"code":"import _regeneratorRuntime from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _inherits from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Injectable, Inject, Directive, Input, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { BehaviorSubject, skip, filter, take, ReplaySubject, AsyncSubject, isObservable } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\nvar BaseLoginProvider = /*#__PURE__*/function () {\n  function BaseLoginProvider() {\n    _classCallCheck(this, BaseLoginProvider);\n  }\n\n  _createClass(BaseLoginProvider, [{\n    key: \"loadScript\",\n    value: function loadScript(id, src, onload) {\n      var parentElement = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n      // get document if platform is only browser\n      if (typeof document !== 'undefined' && !document.getElementById(id)) {\n        var signInJS = document.createElement('script');\n        signInJS.async = true;\n        signInJS.src = src;\n        signInJS.onload = onload;\n\n        if (!parentElement) {\n          parentElement = document.head;\n        }\n\n        parentElement.appendChild(signInJS);\n      }\n    }\n  }]);\n\n  return BaseLoginProvider;\n}();\n\nvar SocialUser = /*#__PURE__*/_createClass(function SocialUser() {\n  _classCallCheck(this, SocialUser);\n});\n\nvar defaultInitOptions = {\n  oneTapEnabled: true\n};\nvar GoogleLoginProvider = /*#__PURE__*/(function () {\n  var GoogleLoginProvider = /*#__PURE__*/function (_BaseLoginProvider) {\n    _inherits(GoogleLoginProvider, _BaseLoginProvider);\n\n    var _super = _createSuper(GoogleLoginProvider);\n\n    function GoogleLoginProvider(clientId, initOptions) {\n      var _this;\n\n      _classCallCheck(this, GoogleLoginProvider);\n\n      _this = _super.call(this);\n      _this.clientId = clientId;\n      _this.initOptions = initOptions;\n      _this.changeUser = new EventEmitter();\n      _this._socialUser = new BehaviorSubject(null);\n      _this._accessToken = new BehaviorSubject(null);\n      _this._receivedAccessToken = new EventEmitter();\n      _this.initOptions = Object.assign(Object.assign({}, defaultInitOptions), _this.initOptions); // emit changeUser events but skip initial value from behaviorSubject\n\n      _this._socialUser.pipe(skip(1)).subscribe(_this.changeUser); // emit receivedAccessToken but skip initial value from behaviorSubject\n\n\n      _this._accessToken.pipe(skip(1)).subscribe(_this._receivedAccessToken);\n\n      return _this;\n    }\n\n    _createClass(GoogleLoginProvider, [{\n      key: \"initialize\",\n      value: function initialize(autoLogin) {\n        var _this2 = this;\n\n        return new Promise(function (resolve, reject) {\n          try {\n            _this2.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://accounts.google.com/gsi/client', function () {\n              var _a;\n\n              google.accounts.id.initialize({\n                client_id: _this2.clientId,\n                auto_select: autoLogin,\n                callback: function callback(_ref) {\n                  var credential = _ref.credential;\n\n                  var socialUser = _this2.createSocialUser(credential);\n\n                  _this2._socialUser.next(socialUser);\n                },\n                prompt_parent_id: (_a = _this2.initOptions) === null || _a === void 0 ? void 0 : _a.prompt_parent_id,\n                itp_support: _this2.initOptions.oneTapEnabled\n              });\n\n              if (_this2.initOptions.oneTapEnabled) {\n                _this2._socialUser.pipe(filter(function (user) {\n                  return user === null;\n                })).subscribe(function () {\n                  return google.accounts.id.prompt(console.debug);\n                });\n              }\n\n              if (_this2.initOptions.scopes) {\n                var scope = _this2.initOptions.scopes instanceof Array ? _this2.initOptions.scopes.filter(function (s) {\n                  return s;\n                }).join(' ') : _this2.initOptions.scopes;\n                _this2._tokenClient = google.accounts.oauth2.initTokenClient({\n                  client_id: _this2.clientId,\n                  scope: scope,\n                  prompt: _this2.initOptions.prompt,\n                  callback: function callback(tokenResponse) {\n                    if (tokenResponse.error) {\n                      _this2._accessToken.error({\n                        code: tokenResponse.error,\n                        description: tokenResponse.error_description,\n                        uri: tokenResponse.error_uri\n                      });\n                    } else {\n                      _this2._accessToken.next(tokenResponse.access_token);\n                    }\n                  }\n                });\n              }\n\n              resolve();\n            });\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        var _this3 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (_this3._socialUser.value) {\n            resolve(_this3._socialUser.value);\n          } else {\n            reject(\"No user is currently logged in with \".concat(GoogleLoginProvider.PROVIDER_ID));\n          }\n        });\n      }\n    }, {\n      key: \"refreshToken\",\n      value: function refreshToken() {\n        var _this4 = this;\n\n        return new Promise(function (resolve, reject) {\n          google.accounts.id.revoke(_this4._socialUser.value.id, function (response) {\n            if (response.error) reject(response.error);else resolve(_this4._socialUser.value);\n          });\n        });\n      }\n    }, {\n      key: \"getAccessToken\",\n      value: function getAccessToken() {\n        var _this5 = this;\n\n        return new Promise(function (resolve, reject) {\n          var _a;\n\n          if (!_this5._tokenClient) {\n            if (_this5._socialUser.value) {\n              reject('No token client was instantiated, you should specify some scopes.');\n            } else {\n              reject('You should be logged-in first.');\n            }\n          } else {\n            _this5._tokenClient.requestAccessToken({\n              hint: (_a = _this5._socialUser.value) === null || _a === void 0 ? void 0 : _a.email\n            });\n\n            _this5._receivedAccessToken.pipe(take(1)).subscribe(resolve);\n          }\n        });\n      }\n    }, {\n      key: \"revokeAccessToken\",\n      value: function revokeAccessToken() {\n        var _this6 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (!_this6._tokenClient) {\n            reject('No token client was instantiated, you should specify some scopes.');\n          } else if (!_this6._accessToken.value) {\n            reject('No access token to revoke');\n          } else {\n            google.accounts.oauth2.revoke(_this6._accessToken.value, function () {\n              _this6._accessToken.next(null);\n\n              resolve();\n            });\n          }\n        });\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn() {\n        return Promise.reject('You should not call this method directly for Google, use \"<asl-google-signin-button>\" wrapper ' + 'or generate the button yourself with \"google.accounts.id.renderButton()\" ' + '(https://developers.google.com/identity/gsi/web/guides/display-button#javascript)');\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  google.accounts.id.disableAutoSelect();\n\n                  this._socialUser.next(null);\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"createSocialUser\",\n      value: function createSocialUser(idToken) {\n        var user = new SocialUser();\n        user.idToken = idToken;\n        var payload = this.decodeJwt(idToken);\n        user.id = payload.sub;\n        user.name = payload.name;\n        user.email = payload.email;\n        user.photoUrl = payload.picture;\n        user.firstName = payload['given_name'];\n        user.lastName = payload['family_name'];\n        return user;\n      }\n    }, {\n      key: \"decodeJwt\",\n      value: function decodeJwt(idToken) {\n        var base64Url = idToken.split(\".\")[1];\n        var base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\");\n        var jsonPayload = decodeURIComponent(window.atob(base64).split(\"\").map(function (c) {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(\"\"));\n        return JSON.parse(jsonPayload);\n      }\n    }]);\n\n    return GoogleLoginProvider;\n  }(BaseLoginProvider);\n\n  GoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n  /**\r\n   * The service encapsulating the social login functionality. Exposes methods like\r\n   * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\r\n   * subscribe to get the current logged in user information.\r\n   *\r\n   * @dynamic\r\n   */\n\n  return GoogleLoginProvider;\n})();\nvar SocialAuthService = /*#__PURE__*/(function () {\n  var SocialAuthService = /*#__PURE__*/function () {\n    /**\r\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\r\n     */\n    function SocialAuthService(config, _ngZone, _injector) {\n      var _this7 = this;\n\n      _classCallCheck(this, SocialAuthService);\n\n      this._ngZone = _ngZone;\n      this._injector = _injector;\n      this.providers = new Map();\n      this.autoLogin = false;\n      this._user = null;\n      this._authState = new ReplaySubject(1);\n      /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n      this.initialized = false;\n      this._initState = new AsyncSubject();\n\n      if (config instanceof Promise) {\n        config.then(function (config) {\n          _this7.initialize(config);\n        });\n      } else {\n        this.initialize(config);\n      }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n    _createClass(SocialAuthService, [{\n      key: \"authState\",\n      get: function get() {\n        return this._authState.asObservable();\n      }\n      /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n    }, {\n      key: \"initState\",\n      get: function get() {\n        return this._initState.asObservable();\n      }\n    }, {\n      key: \"initialize\",\n      value: function initialize(config) {\n        var _this8 = this;\n\n        this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n        var _config$onError = config.onError,\n            onError = _config$onError === void 0 ? console.error : _config$onError;\n        config.providers.forEach(function (item) {\n          _this8.providers.set(item.id, 'prototype' in item.provider ? _this8._injector.get(item.provider) : item.provider);\n        });\n        Promise.all(Array.from(this.providers.values()).map(function (provider) {\n          return provider.initialize(_this8.autoLogin);\n        })).then(function () {\n          if (_this8.autoLogin) {\n            var loginStatusPromises = [];\n            var loggedIn = false;\n\n            _this8.providers.forEach(function (provider, key) {\n              var promise = provider.getLoginStatus();\n              loginStatusPromises.push(promise);\n              promise.then(function (user) {\n                _this8.setUser(user, key);\n\n                loggedIn = true;\n              }).catch(console.debug);\n            });\n\n            Promise.all(loginStatusPromises).catch(function () {\n              if (!loggedIn) {\n                _this8._user = null;\n\n                _this8._authState.next(null);\n              }\n            });\n          }\n\n          _this8.providers.forEach(function (provider, key) {\n            if (isObservable(provider.changeUser)) {\n              provider.changeUser.subscribe(function (user) {\n                _this8._ngZone.run(function () {\n                  _this8.setUser(user, key);\n                });\n              });\n            }\n          });\n        }).catch(function (error) {\n          onError(error);\n        }).finally(function () {\n          _this8.initialized = true;\n\n          _this8._initState.next(_this8.initialized);\n\n          _this8._initState.complete();\n        });\n      }\n    }, {\n      key: \"getAccessToken\",\n      value: function getAccessToken(providerId) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var providerObject;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  providerObject = this.providers.get(providerId);\n\n                  if (this.initialized) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  throw SocialAuthService.ERR_NOT_INITIALIZED;\n\n                case 5:\n                  if (providerObject) {\n                    _context2.next = 9;\n                    break;\n                  }\n\n                  throw SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND;\n\n                case 9:\n                  if (providerObject instanceof GoogleLoginProvider) {\n                    _context2.next = 11;\n                    break;\n                  }\n\n                  throw SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN;\n\n                case 11:\n                  _context2.next = 13;\n                  return providerObject.getAccessToken();\n\n                case 13:\n                  return _context2.abrupt(\"return\", _context2.sent);\n\n                case 14:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"refreshAuthToken\",\n      value: function refreshAuthToken(providerId) {\n        var _this9 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (!_this9.initialized) {\n            reject(SocialAuthService.ERR_NOT_INITIALIZED);\n          } else {\n            var providerObject = _this9.providers.get(providerId);\n\n            if (providerObject) {\n              if (typeof providerObject.refreshToken !== 'function') {\n                reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n              } else {\n                providerObject.refreshToken().then(function (user) {\n                  _this9.setUser(user, providerId);\n\n                  resolve();\n                }).catch(function (err) {\n                  reject(err);\n                });\n              }\n            } else {\n              reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n            }\n          }\n        });\n      }\n    }, {\n      key: \"refreshAccessToken\",\n      value: function refreshAccessToken(providerId) {\n        var _this10 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (!_this10.initialized) {\n            reject(SocialAuthService.ERR_NOT_INITIALIZED);\n          } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n            reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n          } else {\n            var providerObject = _this10.providers.get(providerId);\n\n            if (providerObject instanceof GoogleLoginProvider) {\n              providerObject.revokeAccessToken().then(resolve).catch(reject);\n            } else {\n              reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n            }\n          }\n        });\n      }\n      /**\r\n       * A method used to sign in a user with a specific `LoginProvider`.\r\n       *\r\n       * @param providerId Id with which the `LoginProvider` has been registered with the service\r\n       * @param signInOptions Optional `LoginProvider` specific arguments\r\n       * @returns A `Promise` that resolves to the authenticated user information\r\n       */\n\n    }, {\n      key: \"signIn\",\n      value: function signIn(providerId, signInOptions) {\n        var _this11 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (!_this11.initialized) {\n            reject(SocialAuthService.ERR_NOT_INITIALIZED);\n          } else {\n            var providerObject = _this11.providers.get(providerId);\n\n            if (providerObject) {\n              providerObject.signIn(signInOptions).then(function (user) {\n                _this11.setUser(user, providerId);\n\n                resolve(user);\n              }).catch(function (err) {\n                reject(err);\n              });\n            } else {\n              reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n            }\n          }\n        });\n      }\n      /**\r\n       * A method used to sign out the currently loggen in user.\r\n       *\r\n       * @param revoke Optional parameter to specify whether a hard sign out is to be performed\r\n       * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\r\n       */\n\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        var _this12 = this;\n\n        var revoke = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        return new Promise(function (resolve, reject) {\n          if (!_this12.initialized) {\n            reject(SocialAuthService.ERR_NOT_INITIALIZED);\n          } else if (!_this12._user) {\n            reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n          } else {\n            var providerId = _this12._user.provider;\n\n            var providerObject = _this12.providers.get(providerId);\n\n            if (providerObject) {\n              providerObject.signOut(revoke).then(function () {\n                resolve();\n\n                _this12.setUser(null);\n              }).catch(function (err) {\n                reject(err);\n              });\n            } else {\n              reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n            }\n          }\n        });\n      }\n    }, {\n      key: \"setUser\",\n      value: function setUser(user, id) {\n        if (user && id) user.provider = id;\n        this._user = user;\n\n        this._authState.next(user);\n      }\n    }]);\n\n    return SocialAuthService;\n  }();\n\n  SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\n  SocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\n  SocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\n  SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n  SocialAuthService.ERR_NOT_SUPPORTED_FOR_ACCESS_TOKEN = 'Chosen login provider is not supported for getting an access token';\n\n  SocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n    return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i0.Injector));\n  };\n\n  SocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SocialAuthService,\n    factory: SocialAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return SocialAuthService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar GoogleSigninButtonDirective = /*#__PURE__*/(function () {\n  var GoogleSigninButtonDirective = /*#__PURE__*/_createClass(function GoogleSigninButtonDirective(el, socialAuthService) {\n    var _this13 = this;\n\n    _classCallCheck(this, GoogleSigninButtonDirective);\n\n    this.type = 'icon';\n    this.size = 'medium';\n    this.text = 'signin_with';\n    this.shape = 'rectangular';\n    this.theme = 'outline';\n    this.logo_alignment = 'left';\n    this.width = '';\n    this.locale = '';\n    socialAuthService.initState.pipe(take(1)).subscribe(function () {\n      Promise.resolve(_this13.width).then(function (value) {\n        if (value > '400' || value < '200' && value != '') {\n          Promise.reject('Please note .. max-width 400 , min-width 200 ' + '(https://developers.google.com/identity/gsi/web/tools/configurator)');\n        } else {\n          google.accounts.id.renderButton(el.nativeElement, {\n            type: _this13.type,\n            size: _this13.size,\n            text: _this13.text,\n            width: _this13.width,\n            shape: _this13.shape,\n            theme: _this13.theme,\n            logo_alignment: _this13.logo_alignment,\n            locale: _this13.locale\n          });\n        }\n      });\n    });\n  });\n\n  GoogleSigninButtonDirective.ɵfac = function GoogleSigninButtonDirective_Factory(t) {\n    return new (t || GoogleSigninButtonDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(SocialAuthService));\n  };\n\n  GoogleSigninButtonDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GoogleSigninButtonDirective,\n    selectors: [[\"asl-google-signin-button\"]],\n    inputs: {\n      type: \"type\",\n      size: \"size\",\n      text: \"text\",\n      shape: \"shape\",\n      theme: \"theme\",\n      logo_alignment: \"logo_alignment\",\n      width: \"width\",\n      locale: \"locale\"\n    }\n  });\n  return GoogleSigninButtonDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * The main module of angularx-social-login library.\r\n */\n\n\nvar SocialLoginModule = /*#__PURE__*/(function () {\n  var SocialLoginModule = /*#__PURE__*/function () {\n    function SocialLoginModule(parentModule) {\n      _classCallCheck(this, SocialLoginModule);\n\n      if (parentModule) {\n        throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n    _createClass(SocialLoginModule, null, [{\n      key: \"initialize\",\n      value: function initialize(config) {\n        return {\n          ngModule: SocialLoginModule,\n          providers: [SocialAuthService, {\n            provide: 'SocialAuthServiceConfig',\n            useValue: config\n          }]\n        };\n      }\n    }]);\n\n    return SocialLoginModule;\n  }();\n\n  SocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n    return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n  };\n\n  SocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SocialLoginModule\n  });\n  SocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SocialAuthService],\n    imports: [CommonModule]\n  });\n  return SocialLoginModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nvar DummyLoginProvider = /*#__PURE__*/(function () {\n  var DummyLoginProvider = /*#__PURE__*/function (_BaseLoginProvider2) {\n    _inherits(DummyLoginProvider, _BaseLoginProvider2);\n\n    var _super2 = _createSuper(DummyLoginProvider);\n\n    function DummyLoginProvider(dummy) {\n      var _this14;\n\n      _classCallCheck(this, DummyLoginProvider);\n\n      _this14 = _super2.call(this);\n\n      if (dummy) {\n        _this14.dummy = dummy;\n      } else {\n        _this14.dummy = DummyLoginProvider.DEFAULT_USER;\n      } // Start not logged in\n\n\n      _this14.loggedIn = false;\n      return _this14;\n    }\n\n    _createClass(DummyLoginProvider, [{\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        var _this15 = this;\n\n        return new Promise(function (resolve, reject) {\n          if (_this15.loggedIn) {\n            resolve(_this15.dummy);\n          } else {\n            reject('No user is currently logged in.');\n          }\n        });\n      }\n    }, {\n      key: \"initialize\",\n      value: function initialize() {\n        return new Promise(function (resolve, reject) {\n          resolve();\n        });\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn() {\n        var _this16 = this;\n\n        return new Promise(function (resolve, reject) {\n          _this16.loggedIn = true;\n          resolve(_this16.dummy);\n        });\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut(revoke) {\n        var _this17 = this;\n\n        return new Promise(function (resolve, reject) {\n          _this17.loggedIn = false;\n          resolve();\n        });\n      }\n    }]);\n\n    return DummyLoginProvider;\n  }(BaseLoginProvider);\n\n  DummyLoginProvider.PROVIDER_ID = 'DUMMY';\n  DummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n  };\n  return DummyLoginProvider;\n})();\nvar FacebookLoginProvider = /*#__PURE__*/(function () {\n  var FacebookLoginProvider = /*#__PURE__*/function (_BaseLoginProvider3) {\n    _inherits(FacebookLoginProvider, _BaseLoginProvider3);\n\n    var _super3 = _createSuper(FacebookLoginProvider);\n\n    function FacebookLoginProvider(clientId) {\n      var _this18;\n\n      var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, FacebookLoginProvider);\n\n      _this18 = _super3.call(this);\n      _this18.clientId = clientId;\n      _this18.requestOptions = {\n        scope: 'email,public_profile',\n        locale: 'en_US',\n        fields: 'name,email,picture,first_name,last_name',\n        version: 'v10.0'\n      };\n      _this18.requestOptions = Object.assign(Object.assign({}, _this18.requestOptions), initOptions);\n      return _this18;\n    }\n\n    _createClass(FacebookLoginProvider, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var _this19 = this;\n\n        return new Promise(function (resolve, reject) {\n          try {\n            _this19.loadScript(FacebookLoginProvider.PROVIDER_ID, \"//connect.facebook.net/\".concat(_this19.requestOptions.locale, \"/sdk.js\"), function () {\n              FB.init({\n                appId: _this19.clientId,\n                autoLogAppEvents: true,\n                cookie: true,\n                xfbml: true,\n                version: _this19.requestOptions.version\n              });\n              resolve();\n            });\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        var _this20 = this;\n\n        return new Promise(function (resolve, reject) {\n          FB.getLoginStatus(function (response) {\n            if (response.status === 'connected') {\n              var authResponse = response.authResponse;\n              FB.api(\"/me?fields=\".concat(_this20.requestOptions.fields), function (fbUser) {\n                var user = new SocialUser();\n                user.id = fbUser.id;\n                user.name = fbUser.name;\n                user.email = fbUser.email;\n                user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n                user.firstName = fbUser.first_name;\n                user.lastName = fbUser.last_name;\n                user.authToken = authResponse.accessToken;\n                user.response = fbUser;\n                resolve(user);\n              });\n            } else {\n              reject(\"No user is currently logged in with \".concat(FacebookLoginProvider.PROVIDER_ID));\n            }\n          });\n        });\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn(signInOptions) {\n        var options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n        return new Promise(function (resolve, reject) {\n          FB.login(function (response) {\n            if (response.authResponse) {\n              var authResponse = response.authResponse;\n              FB.api(\"/me?fields=\".concat(options.fields), function (fbUser) {\n                var user = new SocialUser();\n                user.id = fbUser.id;\n                user.name = fbUser.name;\n                user.email = fbUser.email;\n                user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n                user.firstName = fbUser.first_name;\n                user.lastName = fbUser.last_name;\n                user.authToken = authResponse.accessToken;\n                user.response = fbUser;\n                resolve(user);\n              });\n            } else {\n              reject('User cancelled login or did not fully authorize.');\n            }\n          }, options);\n        });\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        return new Promise(function (resolve, reject) {\n          FB.logout(function (response) {\n            resolve();\n          });\n        });\n      }\n    }]);\n\n    return FacebookLoginProvider;\n  }(BaseLoginProvider);\n\n  FacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n  return FacebookLoginProvider;\n})();\nvar AmazonLoginProvider = /*#__PURE__*/(function () {\n  var AmazonLoginProvider = /*#__PURE__*/function (_BaseLoginProvider4) {\n    _inherits(AmazonLoginProvider, _BaseLoginProvider4);\n\n    var _super4 = _createSuper(AmazonLoginProvider);\n\n    function AmazonLoginProvider(clientId) {\n      var _this21;\n\n      var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        scope: 'profile',\n        scope_data: {\n          profile: {\n            essential: false\n          }\n        },\n        redirect_uri: location.origin\n      };\n\n      _classCallCheck(this, AmazonLoginProvider);\n\n      _this21 = _super4.call(this);\n      _this21.clientId = clientId;\n      _this21.initOptions = initOptions;\n      return _this21;\n    }\n\n    _createClass(AmazonLoginProvider, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var _this22 = this;\n\n        var amazonRoot = null;\n\n        if (document) {\n          amazonRoot = document.createElement('div');\n          amazonRoot.id = 'amazon-root';\n          document.body.appendChild(amazonRoot);\n        }\n\n        window.onAmazonLoginReady = function () {\n          amazon.Login.setClientId(_this22.clientId);\n        };\n\n        return new Promise(function (resolve, reject) {\n          try {\n            _this22.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', function () {\n              resolve();\n            }, amazonRoot);\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        var _this23 = this;\n\n        return new Promise(function (resolve, reject) {\n          var token = _this23.retrieveToken();\n\n          if (token) {\n            amazon.Login.retrieveProfile(token, function (response) {\n              if (response.success) {\n                var user = new SocialUser();\n                user.id = response.profile.CustomerId;\n                user.name = response.profile.Name;\n                user.email = response.profile.PrimaryEmail;\n                user.response = response.profile;\n                resolve(user);\n              } else {\n                reject(response.error);\n              }\n            });\n          } else {\n            reject(\"No user is currently logged in with \".concat(AmazonLoginProvider.PROVIDER_ID));\n          }\n        });\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn(signInOptions) {\n        var _this24 = this;\n\n        var options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n        return new Promise(function (resolve, reject) {\n          amazon.Login.authorize(options, function (authResponse) {\n            if (authResponse.error) {\n              reject(authResponse.error);\n            } else {\n              amazon.Login.retrieveProfile(authResponse.access_token, function (response) {\n                var user = new SocialUser();\n                user.id = response.profile.CustomerId;\n                user.name = response.profile.Name;\n                user.email = response.profile.PrimaryEmail;\n                user.authToken = authResponse.access_token;\n                user.response = response.profile;\n\n                _this24.persistToken(authResponse.access_token);\n\n                resolve(user);\n              });\n            }\n          });\n        });\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        var _this25 = this;\n\n        return new Promise(function (resolve, reject) {\n          try {\n            amazon.Login.logout();\n\n            _this25.clearToken();\n\n            resolve();\n          } catch (err) {\n            reject(err.message);\n          }\n        });\n      }\n    }, {\n      key: \"persistToken\",\n      value: function persistToken(token) {\n        localStorage.setItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"), token);\n      }\n    }, {\n      key: \"retrieveToken\",\n      value: function retrieveToken() {\n        return localStorage.getItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n      }\n    }, {\n      key: \"clearToken\",\n      value: function clearToken() {\n        localStorage.removeItem(\"\".concat(AmazonLoginProvider.PROVIDER_ID, \"_token\"));\n      }\n    }]);\n\n    return AmazonLoginProvider;\n  }(BaseLoginProvider);\n\n  AmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n  return AmazonLoginProvider;\n})();\nvar VKLoginProvider = /*#__PURE__*/(function () {\n  var VKLoginProvider = /*#__PURE__*/function (_BaseLoginProvider5) {\n    _inherits(VKLoginProvider, _BaseLoginProvider5);\n\n    var _super5 = _createSuper(VKLoginProvider);\n\n    function VKLoginProvider(clientId) {\n      var _this26;\n\n      var initOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        fields: 'photo_max,contacts',\n        version: '5.124'\n      };\n\n      _classCallCheck(this, VKLoginProvider);\n\n      _this26 = _super5.call(this);\n      _this26.clientId = clientId;\n      _this26.initOptions = initOptions;\n      _this26.VK_API_URL = '//vk.com/js/api/openapi.js';\n      _this26.VK_API_GET_USER = 'users.get';\n      return _this26;\n    }\n\n    _createClass(VKLoginProvider, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var _this27 = this;\n\n        return new Promise(function (resolve, reject) {\n          try {\n            _this27.loadScript(VKLoginProvider.PROVIDER_ID, _this27.VK_API_URL, function () {\n              VK.init({\n                apiId: _this27.clientId\n              });\n              resolve();\n            });\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        var _this28 = this;\n\n        return new Promise(function (resolve, reject) {\n          return _this28.getLoginStatusInternal(resolve, reject);\n        });\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn() {\n        var _this29 = this;\n\n        return new Promise(function (resolve, reject) {\n          return _this29.signInInternal(resolve, reject);\n        });\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut() {\n        return new Promise(function (resolve, reject) {\n          VK.Auth.logout(function (response) {\n            resolve();\n          });\n        });\n      }\n    }, {\n      key: \"signInInternal\",\n      value: function signInInternal(resolve, reject) {\n        var _this30 = this;\n\n        VK.Auth.login(function (loginResponse) {\n          if (loginResponse.status === 'connected') {\n            _this30.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n          }\n        });\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser(userId, token, resolve) {\n        var _this31 = this;\n\n        VK.Api.call(this.VK_API_GET_USER, {\n          user_id: userId,\n          fields: this.initOptions.fields,\n          v: this.initOptions.version\n        }, function (userResponse) {\n          resolve(_this31.createUser(Object.assign({}, {\n            token: token\n          }, userResponse.response[0])));\n        });\n      }\n    }, {\n      key: \"getLoginStatusInternal\",\n      value: function getLoginStatusInternal(resolve, reject) {\n        var _this32 = this;\n\n        VK.Auth.getLoginStatus(function (loginResponse) {\n          if (loginResponse.status === 'connected') {\n            _this32.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n          }\n        });\n      }\n    }, {\n      key: \"createUser\",\n      value: function createUser(response) {\n        var user = new SocialUser();\n        user.id = response.id;\n        user.name = \"\".concat(response.first_name, \" \").concat(response.last_name);\n        user.photoUrl = response.photo_max;\n        user.authToken = response.token;\n        return user;\n      }\n    }]);\n\n    return VKLoginProvider;\n  }(BaseLoginProvider);\n\n  VKLoginProvider.PROVIDER_ID = 'VK';\n  /**\r\n   * Protocol modes supported by MSAL.\r\n   */\n\n  return VKLoginProvider;\n})();\nvar ProtocolMode = /*#__PURE__*/(function () {\n  (function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n  })(ProtocolMode || (ProtocolMode = {}));\n\n  return ProtocolMode;\n})();\nvar COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\r\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\r\n */\n\nvar MicrosoftLoginProvider = /*#__PURE__*/(function () {\n  var MicrosoftLoginProvider = /*#__PURE__*/function (_BaseLoginProvider6) {\n    _inherits(MicrosoftLoginProvider, _BaseLoginProvider6);\n\n    var _super6 = _createSuper(MicrosoftLoginProvider);\n\n    function MicrosoftLoginProvider(clientId, initOptions) {\n      var _this33;\n\n      _classCallCheck(this, MicrosoftLoginProvider);\n\n      _this33 = _super6.call(this);\n      _this33.clientId = clientId;\n      _this33.initOptions = {\n        authority: COMMON_AUTHORITY,\n        scopes: ['openid', 'email', 'profile', 'User.Read'],\n        knownAuthorities: [],\n        protocolMode: ProtocolMode.AAD,\n        clientCapabilities: [],\n        cacheLocation: 'sessionStorage'\n      };\n      _this33.initOptions = Object.assign(Object.assign({}, _this33.initOptions), initOptions);\n      return _this33;\n    }\n\n    _createClass(MicrosoftLoginProvider, [{\n      key: \"initialize\",\n      value: function initialize() {\n        var _this34 = this;\n\n        return new Promise(function (resolve, reject) {\n          _this34.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.min.js', function () {\n            var _a;\n\n            try {\n              var config = {\n                auth: {\n                  clientId: _this34.clientId,\n                  redirectUri: (_a = _this34.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                  authority: _this34.initOptions.authority,\n                  knownAuthorities: _this34.initOptions.knownAuthorities,\n                  protocolMode: _this34.initOptions.protocolMode,\n                  clientCapabilities: _this34.initOptions.clientCapabilities\n                },\n                cache: !_this34.initOptions.cacheLocation ? null : {\n                  cacheLocation: _this34.initOptions.cacheLocation\n                }\n              };\n              _this34._instance = new msal.PublicClientApplication(config);\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"getSocialUser\",\n      value: function getSocialUser(loginResponse) {\n        return new Promise(function (resolve, reject) {\n          //After login, use Microsoft Graph API to get user info\n          var meRequest = new XMLHttpRequest();\n\n          meRequest.onreadystatechange = function () {\n            if (meRequest.readyState == 4) {\n              try {\n                if (meRequest.status == 200) {\n                  var userInfo = JSON.parse(meRequest.responseText);\n                  var user = new SocialUser();\n                  user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                  user.id = loginResponse.idToken;\n                  user.authToken = loginResponse.accessToken;\n                  user.name = loginResponse.idTokenClaims.name;\n                  user.email = loginResponse.account.username;\n                  user.idToken = loginResponse.idToken;\n                  user.response = loginResponse;\n                  user.firstName = userInfo.givenName;\n                  user.lastName = userInfo.surname;\n                  resolve(user);\n                } else {\n                  reject(\"Error retrieving user info: \".concat(meRequest.status));\n                }\n              } catch (err) {\n                reject(err);\n              }\n            }\n          }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n          meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n          meRequest.setRequestHeader('Authorization', \"Bearer \".concat(loginResponse.accessToken));\n\n          try {\n            meRequest.send();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }, {\n      key: \"getLoginStatus\",\n      value: function getLoginStatus() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var accounts, loginResponse;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  accounts = this._instance.getAllAccounts();\n\n                  if (!((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0)) {\n                    _context3.next = 10;\n                    break;\n                  }\n\n                  _context3.next = 4;\n                  return this._instance.ssoSilent({\n                    scopes: this.initOptions.scopes,\n                    loginHint: accounts[0].username\n                  });\n\n                case 4:\n                  loginResponse = _context3.sent;\n                  _context3.next = 7;\n                  return this.getSocialUser(loginResponse);\n\n                case 7:\n                  return _context3.abrupt(\"return\", _context3.sent);\n\n                case 10:\n                  throw \"No user is currently logged in with \".concat(MicrosoftLoginProvider.PROVIDER_ID);\n\n                case 11:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      }\n    }, {\n      key: \"signIn\",\n      value: function signIn() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          var loginResponse;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.next = 2;\n                  return this._instance.loginPopup({\n                    scopes: this.initOptions.scopes,\n                    prompt: this.initOptions.prompt\n                  });\n\n                case 2:\n                  loginResponse = _context4.sent;\n                  _context4.next = 5;\n                  return this.getSocialUser(loginResponse);\n\n                case 5:\n                  return _context4.abrupt(\"return\", _context4.sent);\n\n                case 6:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n      }\n    }, {\n      key: \"signOut\",\n      value: function signOut(revoke) {\n        var _a, _b;\n\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          var accounts;\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  accounts = this._instance.getAllAccounts();\n\n                  if (!((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0)) {\n                    _context5.next = 4;\n                    break;\n                  }\n\n                  _context5.next = 4;\n                  return this._instance.logoutPopup({\n                    account: accounts[0],\n                    postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n      }\n    }]);\n\n    return MicrosoftLoginProvider;\n  }(BaseLoginProvider);\n\n  MicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n  /**\r\n   * Generated bundle index. Do not edit.\r\n   */\n\n  return MicrosoftLoginProvider;\n})();\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, GoogleSigninButtonDirective, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider }; //# sourceMappingURL=abacritt-angularx-social-login.mjs.map","map":null,"metadata":{},"sourceType":"module"}