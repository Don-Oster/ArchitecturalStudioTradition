{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { PAGE_META, PAGE_META_DEFAULT_TITLE } from '@shared/models/page-meta.consts';\nimport { Page } from '@shared/page.enum';\nimport { META_BASE_URL_TOKEN } from './meta-base-url.token';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../links/links.service\";\nimport * as i2 from \"./meta-tags.service\";\nexport let PageMetaService = /*#__PURE__*/(() => {\n  class PageMetaService {\n    constructor(linksService, metaTags, baseUrl, document) {\n      this.linksService = linksService;\n      this.metaTags = metaTags;\n      this.baseUrl = baseUrl;\n      this.document = document;\n      this.absoluteUrl = this.baseUrl ? this.baseUrl.trim() : this.document.location.origin;\n    }\n\n    forHome() {\n      const meta = {\n        title: PAGE_META.HOME.title,\n        description: PAGE_META.HOME.description,\n        url: this.linksService.base(''),\n        imageUrl: PAGE_META.HOME.imageUrl,\n        isPrivate: false\n      };\n      this.setTags(meta);\n    }\n\n    forSearch() {\n      const meta = {\n        title: PAGE_META.SEARCH.title,\n        description: PAGE_META.SEARCH.description,\n        url: this.linksService.base(Page.Search),\n        imageUrl: PAGE_META.SEARCH.imageUrl,\n        isPrivate: true\n      };\n      this.setTags(meta);\n    }\n\n    forAbout() {\n      const meta = {\n        title: PAGE_META.ABOUT.title,\n        description: PAGE_META.ABOUT.description,\n        url: this.linksService.base(Page.About),\n        imageUrl: PAGE_META.ABOUT.imageUrl,\n        isPrivate: false\n      };\n      this.setTags(meta);\n    }\n\n    forNotFound() {\n      const meta = {\n        title: PAGE_META.NOT_FOUND.title,\n        description: PAGE_META.NOT_FOUND.description,\n        url: this.linksService.notFound(),\n        imageUrl: PAGE_META.NOT_FOUND.imageUrl,\n        isPrivate: true\n      };\n      this.setTags(meta);\n    }\n\n    forTermsConditions() {\n      const meta = {\n        title: PAGE_META.TERMS_AND_CONDITIONS.title,\n        description: PAGE_META.TERMS_AND_CONDITIONS.description,\n        url: this.linksService.base(Page.TermsConditions),\n        imageUrl: PAGE_META.TERMS_AND_CONDITIONS.imageUrl,\n        isPrivate: false\n      };\n      this.setTags(meta);\n    }\n\n    setTags(meta) {\n      meta.title = meta.title !== PAGE_META_DEFAULT_TITLE ? `${meta.title} | ${PAGE_META_DEFAULT_TITLE}` : meta.title;\n      meta.url = `${this.absoluteUrl}${meta.url}`;\n      this.metaTags.setTags(meta);\n    }\n\n  }\n\n  PageMetaService.ɵfac = function PageMetaService_Factory(t) {\n    return new (t || PageMetaService)(i0.ɵɵinject(i1.LinksService), i0.ɵɵinject(i2.MetaTagsService), i0.ɵɵinject(META_BASE_URL_TOKEN, 8), i0.ɵɵinject(DOCUMENT));\n  };\n\n  PageMetaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PageMetaService,\n    factory: PageMetaService.ɵfac\n  });\n  return PageMetaService;\n})();","map":null,"metadata":{},"sourceType":"module"}