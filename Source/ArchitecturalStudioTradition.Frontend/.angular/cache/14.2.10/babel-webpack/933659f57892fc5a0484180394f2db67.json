{"ast":null,"code":"import _get from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Work/Projects/ArchitecturalStudioTradition/Source/ArchitecturalStudioTradition.Frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectFlags, Directive, Input, Output, forwardRef, Component, ViewChild, NgModule } from '@angular/core';\nimport { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nvar _c0 = [\"captchaWrapperElem\"];\nvar ScriptService = /*#__PURE__*/(function () {\n  var ScriptService = /*#__PURE__*/function () {\n    function ScriptService(zone) {\n      _classCallCheck(this, ScriptService);\n\n      this.zone = zone;\n      this.scriptElemId = \"ngx-catpcha-script\";\n      /**\r\n       * Name of the global google recaptcha script\r\n       */\n\n      this.windowGrecaptcha = \"grecaptcha\";\n      /**\r\n       * Name of enterpise property in the global google recaptcha script\r\n       */\n\n      this.windowGrecaptchaEnterprise = \"enterprise\";\n      /**\r\n       * Name of the global callback\r\n       */\n\n      this.windowOnLoadCallbackProperty = \"ngx_captcha_onload_callback\";\n      /**\r\n       * Name of the global callback for enterprise\r\n       */\n\n      this.windowOnLoadEnterpriseCallbackProperty = \"ngx_captcha_onload_enterprise_callback\";\n      this.globalDomain = \"recaptcha.net\";\n      this.defaultDomain = \"google.com\";\n      this.enterpriseApi = \"enterprise.js\";\n      this.defaultApi = \"api.js\";\n    }\n\n    _createClass(ScriptService, [{\n      key: \"registerCaptchaScript\",\n      value: function registerCaptchaScript(config, render, onLoad, language) {\n        var _this = this;\n\n        if (this.grecaptchaScriptLoaded(config.useEnterprise)) {\n          // recaptcha script is already loaded\n          // just call the callback\n          if (config.useEnterprise) {\n            this.zone.run(function () {\n              onLoad(window[_this.windowGrecaptcha][_this.windowGrecaptchaEnterprise]);\n            });\n          } else {\n            this.zone.run(function () {\n              onLoad(window[_this.windowGrecaptcha]);\n            });\n          }\n\n          return;\n        } // we need to patch the callback through global variable, otherwise callback is not accessible\n        // note: https://github.com/Enngage/ngx-captcha/issues/2\n\n\n        if (config.useEnterprise) {\n          window[this.getCallbackName(true)] = function () {\n            return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha][_this.windowGrecaptchaEnterprise]));\n          };\n        } else {\n          window[this.getCallbackName(false)] = function () {\n            return _this.zone.run(onLoad.bind(_this, window[_this.windowGrecaptcha]));\n          };\n        } // prepare script elem\n\n\n        var scriptElem = document.createElement(\"script\");\n        scriptElem.id = this.scriptElemId;\n        scriptElem.innerHTML = \"\";\n        scriptElem.src = this.getCaptchaScriptUrl(config, render, language);\n        scriptElem.async = true;\n        scriptElem.defer = true; // add script to header\n\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n      }\n    }, {\n      key: \"cleanup\",\n      value: function cleanup() {\n        var elem = document.getElementById(this.scriptElemId);\n\n        if (elem) {\n          elem.remove();\n        }\n\n        window[this.getCallbackName()] = undefined;\n        window[this.windowGrecaptcha] = undefined;\n      }\n      /**\r\n       * Indicates if google recaptcha script is available and ready to be used\r\n       */\n\n    }, {\n      key: \"grecaptchaScriptLoaded\",\n      value: function grecaptchaScriptLoaded(useEnterprise) {\n        if (!window[this.getCallbackName(useEnterprise)] || !window[this.windowGrecaptcha]) {\n          return false;\n        } else if (useEnterprise && window[this.windowGrecaptcha][this.windowGrecaptchaEnterprise]) {\n          return true; // if only enterprise script is loaded we need to check some v3's method\n        } else if (window[this.windowGrecaptcha].execute) {\n          return true;\n        }\n\n        return false;\n      }\n      /**\r\n       * Gets global callback name\r\n       * @param useEnterprise Optional flag for enterprise script\r\n       * @private\r\n       */\n\n    }, {\n      key: \"getCallbackName\",\n      value: function getCallbackName(useEnterprise) {\n        return useEnterprise ? this.windowOnLoadEnterpriseCallbackProperty : this.windowOnLoadCallbackProperty;\n      }\n      /**\r\n       * Gets language param used in script url\r\n       */\n\n    }, {\n      key: \"getLanguageParam\",\n      value: function getLanguageParam(hl) {\n        if (!hl) {\n          return \"\";\n        }\n\n        return \"&hl=\".concat(hl);\n      }\n      /**\r\n       * Url to google api script\r\n       */\n\n    }, {\n      key: \"getCaptchaScriptUrl\",\n      value: function getCaptchaScriptUrl(config, render, language) {\n        var domain = config.useGlobalDomain ? this.globalDomain : this.defaultDomain;\n        var api = config.useEnterprise ? this.enterpriseApi : this.defaultApi;\n        var callback = this.getCallbackName(config.useEnterprise);\n        return \"https://www.\".concat(domain, \"/recaptcha/\").concat(api, \"?onload=\").concat(callback, \"&render=\").concat(render).concat(this.getLanguageParam(language));\n      }\n    }]);\n\n    return ScriptService;\n  }();\n\n  /** @nocollapse */\n  ScriptService.ɵfac = function ScriptService_Factory(t) {\n    return new (t || ScriptService)(i0.ɵɵinject(i0.NgZone));\n  };\n  /** @nocollapse */\n\n\n  ScriptService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ScriptService,\n    factory: ScriptService.ɵfac,\n    providedIn: \"root\"\n  });\n  return ScriptService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar BaseReCaptchaComponentDirective = /*#__PURE__*/(function () {\n  var BaseReCaptchaComponentDirective = /*#__PURE__*/function () {\n    function BaseReCaptchaComponentDirective(renderer, zone, injector, scriptService) {\n      _classCallCheck(this, BaseReCaptchaComponentDirective);\n\n      this.renderer = renderer;\n      this.zone = zone;\n      this.injector = injector;\n      this.scriptService = scriptService;\n      /**\r\n       * Prefix of the captcha element\r\n       */\n\n      this.captchaElemPrefix = \"ngx_captcha_id_\";\n      this.setupCaptcha = true;\n      /**\r\n       * Indicates if global domain 'recaptcha.net' should be used instead of default domain ('google.com')\r\n       */\n\n      this.useGlobalDomain = false;\n      this.useEnterprise = false;\n      /**\r\n       * Type\r\n       */\n\n      this.type = \"image\";\n      /**\r\n       * Tab index\r\n       */\n\n      this.tabIndex = 0;\n      /**\r\n       * Called when captcha receives successful response.\r\n       * Captcha response token is passed to event.\r\n       */\n\n      this.success = new EventEmitter();\n      /**\r\n       * Called when captcha is loaded. Event receives id of the captcha\r\n       */\n\n      this.load = new EventEmitter();\n      /**\r\n       * Called when captcha is reset.\r\n       */\n\n      this.reset = new EventEmitter();\n      /**\r\n       * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.\r\n       */\n\n      this.ready = new EventEmitter();\n      /**\r\n       * Error callback\r\n       */\n\n      this.error = new EventEmitter();\n      /**\r\n       * Expired callback\r\n       */\n\n      this.expire = new EventEmitter();\n      /**\r\n       * Indicates if captcha should be set on load\r\n       */\n\n      this.setupAfterLoad = false;\n      /**\r\n       * If enabled, captcha will reset after receiving success response. This is useful\r\n       * when invisible captcha need to be resolved multiple times on same page\r\n       */\n\n      this.resetCaptchaAfterSuccess = false;\n      /**\r\n       * Indicates if captcha is loaded\r\n       */\n\n      this.isLoaded = false;\n    }\n\n    _createClass(BaseReCaptchaComponentDirective, [{\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _a;\n\n        this.control = (_a = this.injector.get(NgControl, undefined, InjectFlags.Optional)) === null || _a === void 0 ? void 0 : _a.control;\n      }\n    }, {\n      key: \"ngAfterViewChecked\",\n      value: function ngAfterViewChecked() {\n        if (this.setupCaptcha) {\n          this.setupCaptcha = false;\n          this.setupComponent();\n        }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        // cleanup scripts if language changed because they need to be reloaded\n        if (changes && changes.hl) {\n          // cleanup scripts when language changes\n          if (!changes.hl.firstChange && changes.hl.currentValue !== changes.hl.previousValue) {\n            this.scriptService.cleanup();\n          }\n        }\n\n        if (changes && changes.useGlobalDomain) {\n          // cleanup scripts when domain changes\n          if (!changes.useGlobalDomain.firstChange && changes.useGlobalDomain.currentValue !== changes.useGlobalDomain.previousValue) {\n            this.scriptService.cleanup();\n          }\n        }\n\n        this.setupCaptcha = true;\n      }\n      /**\r\n       * Gets captcha response as per reCaptcha docs\r\n       */\n\n    }, {\n      key: \"getResponse\",\n      value: function getResponse() {\n        return this.reCaptchaApi.getResponse(this.captchaId);\n      }\n      /**\r\n       * Gets Id of captcha widget\r\n       */\n\n    }, {\n      key: \"getCaptchaId\",\n      value: function getCaptchaId() {\n        return this.captchaId;\n      }\n      /**\r\n       * Resets captcha\r\n       */\n\n    }, {\n      key: \"resetCaptcha\",\n      value: function resetCaptcha() {\n        var _this2 = this;\n\n        this.zone.run(function () {\n          // reset captcha using Google js api\n          _this2.reCaptchaApi.reset(); // required due to forms\n\n\n          _this2.onChange(undefined);\n\n          _this2.onTouched(undefined); // trigger reset event\n\n\n          _this2.reset.next();\n        });\n      }\n      /**\r\n       * Gets last submitted captcha response\r\n       */\n\n    }, {\n      key: \"getCurrentResponse\",\n      value: function getCurrentResponse() {\n        return this.currentResponse;\n      }\n      /**\r\n       * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them\r\n       */\n\n    }, {\n      key: \"reloadCaptcha\",\n      value: function reloadCaptcha() {\n        this.setupComponent();\n      }\n    }, {\n      key: \"ensureCaptchaElem\",\n      value: function ensureCaptchaElem(captchaElemId) {\n        var captchaElem = document.getElementById(captchaElemId);\n\n        if (!captchaElem) {\n          throw Error(\"Captcha element with id '\".concat(captchaElemId, \"' was not found\"));\n        } // assign captcha alem\n\n\n        this.captchaElem = captchaElem;\n      }\n      /**\r\n       * Responsible for instantiating captcha element\r\n       */\n\n    }, {\n      key: \"renderReCaptcha\",\n      value: function renderReCaptcha() {\n        var _this3 = this;\n\n        // run outside angular zone due to timeout issues when testing\n        // details: https://github.com/Enngage/ngx-captcha/issues/26\n        this.zone.runOutsideAngular(function () {\n          // to fix reCAPTCHA placeholder element must be an element or id\n          // https://github.com/Enngage/ngx-captcha/issues/96\n          setTimeout(function () {\n            _this3.captchaId = _this3.reCaptchaApi.render(_this3.captchaElemId, _this3.getCaptchaProperties());\n\n            _this3.ready.next();\n          }, 0);\n        });\n      }\n      /**\r\n       * Called when captcha receives response\r\n       * @param callback Callback\r\n       */\n\n    }, {\n      key: \"handleCallback\",\n      value: function handleCallback(callback) {\n        var _this4 = this;\n\n        this.currentResponse = callback;\n        this.success.next(callback);\n        this.zone.run(function () {\n          _this4.onChange(callback);\n\n          _this4.onTouched(callback);\n        });\n\n        if (this.resetCaptchaAfterSuccess) {\n          this.resetCaptcha();\n        }\n      }\n    }, {\n      key: \"getPseudoUniqueNumber\",\n      value: function getPseudoUniqueNumber() {\n        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);\n      }\n    }, {\n      key: \"setupComponent\",\n      value: function setupComponent() {\n        var _this5 = this;\n\n        // captcha specific setup\n        this.captchaSpecificSetup(); // create captcha wrapper\n\n        this.createAndSetCaptchaElem();\n        this.scriptService.registerCaptchaScript({\n          useGlobalDomain: this.useGlobalDomain,\n          useEnterprise: this.useEnterprise\n        }, \"explicit\", function (grecaptcha) {\n          _this5.onloadCallback(grecaptcha);\n        }, this.hl);\n      }\n      /**\r\n       * Called when google's recaptcha script is ready\r\n       */\n\n    }, {\n      key: \"onloadCallback\",\n      value: function onloadCallback(grecapcha) {\n        // assign reference to reCaptcha Api once its loaded\n        this.reCaptchaApi = grecapcha;\n\n        if (!this.reCaptchaApi) {\n          throw Error(\"ReCaptcha Api was not initialized correctly\");\n        } // loaded flag\n\n\n        this.isLoaded = true; // fire load event\n\n        this.load.next(); // render captcha\n\n        this.renderReCaptcha(); // setup component if it was flagged as such\n\n        if (this.setupAfterLoad) {\n          this.setupAfterLoad = false;\n          this.setupComponent();\n        }\n      }\n    }, {\n      key: \"generateNewElemId\",\n      value: function generateNewElemId() {\n        return this.captchaElemPrefix + this.getPseudoUniqueNumber();\n      }\n    }, {\n      key: \"createAndSetCaptchaElem\",\n      value: function createAndSetCaptchaElem() {\n        var _this6 = this;\n\n        // generate new captcha id\n        this.captchaElemId = this.generateNewElemId();\n\n        if (!this.captchaElemId) {\n          throw Error(\"Captcha elem Id is not set\");\n        }\n\n        if (!this.captchaWrapperElem) {\n          throw Error(\"Captcha DOM element is not initialized\");\n        } // remove old html\n\n\n        this.captchaWrapperElem.nativeElement.innerHTML = \"\"; // create new wrapper for captcha\n\n        var newElem = this.renderer.createElement(\"div\");\n        newElem.id = this.captchaElemId;\n        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem); // when use captcha in cdk stepper then throwing error Captcha element with id 'ngx_captcha_id_XXXX' not found\n        // to fix it checking ensureCaptchaElem in timeout so that its check in next call and its able to find element\n\n        setTimeout(function () {\n          // update captcha elem\n          if (_this6.captchaElemId) {\n            _this6.ensureCaptchaElem(_this6.captchaElemId);\n          }\n        }, 0);\n      }\n      /**\r\n       * To be aligned with the ControlValueAccessor interface we need to implement this method\r\n       * However as we don't want to update the recaptcha, this doesn't need to be implemented\r\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(obj) {}\n      /**\r\n       * This method helps us tie together recaptcha and our formControl values\r\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\r\n       * At some point we might be interested whether the user has touched our component\r\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\r\n       * Handles error callback\r\n       */\n\n    }, {\n      key: \"handleErrorCallback\",\n      value: function handleErrorCallback() {\n        var _this7 = this;\n\n        this.zone.run(function () {\n          _this7.onChange(undefined);\n\n          _this7.onTouched(undefined);\n        });\n        this.error.next();\n      }\n      /**\r\n       * Handles expired callback\r\n       */\n\n    }, {\n      key: \"handleExpireCallback\",\n      value: function handleExpireCallback() {\n        this.expire.next(); // reset captcha on expire callback\n\n        this.resetCaptcha();\n      }\n    }]);\n\n    return BaseReCaptchaComponentDirective;\n  }();\n\n  /** @nocollapse */\n  BaseReCaptchaComponentDirective.ɵfac = function BaseReCaptchaComponentDirective_Factory(t) {\n    return new (t || BaseReCaptchaComponentDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n\n\n  BaseReCaptchaComponentDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseReCaptchaComponentDirective,\n    inputs: {\n      siteKey: \"siteKey\",\n      useGlobalDomain: \"useGlobalDomain\",\n      useEnterprise: \"useEnterprise\",\n      type: \"type\",\n      hl: \"hl\",\n      tabIndex: \"tabIndex\"\n    },\n    outputs: {\n      success: \"success\",\n      load: \"load\",\n      reset: \"reset\",\n      ready: \"ready\",\n      error: \"error\",\n      expire: \"expire\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BaseReCaptchaComponentDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ReCaptchaType = /*#__PURE__*/(function () {\n  (function (ReCaptchaType) {\n    ReCaptchaType[ReCaptchaType[\"InvisibleReCaptcha\"] = 0] = \"InvisibleReCaptcha\";\n    ReCaptchaType[ReCaptchaType[\"ReCaptcha2\"] = 1] = \"ReCaptcha2\";\n  })(ReCaptchaType || (ReCaptchaType = {}));\n\n  return ReCaptchaType;\n})();\nvar InvisibleReCaptchaComponent = /*#__PURE__*/(function () {\n  var InvisibleReCaptchaComponent = /*#__PURE__*/function (_BaseReCaptchaCompone) {\n    _inherits(InvisibleReCaptchaComponent, _BaseReCaptchaCompone);\n\n    var _super = _createSuper(InvisibleReCaptchaComponent);\n\n    function InvisibleReCaptchaComponent(renderer, zone, injector, scriptService) {\n      var _this8;\n\n      _classCallCheck(this, InvisibleReCaptchaComponent);\n\n      _this8 = _super.call(this, renderer, zone, injector, scriptService);\n      _this8.renderer = renderer;\n      _this8.zone = zone;\n      _this8.injector = injector;\n      _this8.scriptService = scriptService;\n      /**\r\n       * This size representing invisible captcha\r\n       */\n\n      _this8.size = 'invisible';\n      /**\r\n       * Theme\r\n       */\n\n      _this8.theme = 'light';\n      /**\r\n       * Badge\r\n       */\n\n      _this8.badge = 'bottomright';\n      _this8.recaptchaType = ReCaptchaType.InvisibleReCaptcha;\n      return _this8;\n    }\n\n    _createClass(InvisibleReCaptchaComponent, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(InvisibleReCaptchaComponent.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n      /**\r\n       * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.\r\n       */\n\n    }, {\n      key: \"execute\",\n      value: function execute() {\n        var _this9 = this;\n\n        // execute captcha\n        this.zone.runOutsideAngular(function () {\n          return _this9.reCaptchaApi.execute(_this9.captchaId);\n        });\n      }\n    }, {\n      key: \"captchaSpecificSetup\",\n      value: function captchaSpecificSetup() {}\n      /**\r\n      * Gets reCaptcha properties\r\n      */\n\n    }, {\n      key: \"getCaptchaProperties\",\n      value: function getCaptchaProperties() {\n        var _this10 = this;\n\n        return {\n          'sitekey': this.siteKey,\n          'callback': function callback(response) {\n            return _this10.zone.run(function () {\n              return _this10.handleCallback(response);\n            });\n          },\n          'expired-callback': function expiredCallback() {\n            return _this10.zone.run(function () {\n              return _this10.handleExpireCallback();\n            });\n          },\n          'error-callback': function errorCallback() {\n            return _this10.zone.run(function () {\n              return _this10.handleErrorCallback();\n            });\n          },\n          'badge': this.badge,\n          'type': this.type,\n          'tabindex': this.tabIndex,\n          'size': this.size,\n          'theme': this.theme\n        };\n      }\n    }]);\n\n    return InvisibleReCaptchaComponent;\n  }(BaseReCaptchaComponentDirective);\n\n  /** @nocollapse */\n  InvisibleReCaptchaComponent.ɵfac = function InvisibleReCaptchaComponent_Factory(t) {\n    return new (t || InvisibleReCaptchaComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n\n\n  InvisibleReCaptchaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: InvisibleReCaptchaComponent,\n    selectors: [[\"ngx-invisible-recaptcha\"]],\n    viewQuery: function InvisibleReCaptchaComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      badge: \"badge\",\n      hl: \"hl\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return InvisibleReCaptchaComponent;\n      }),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function InvisibleReCaptchaComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return InvisibleReCaptchaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ReCaptcha2Component = /*#__PURE__*/(function () {\n  var ReCaptcha2Component = /*#__PURE__*/function (_BaseReCaptchaCompone2) {\n    _inherits(ReCaptcha2Component, _BaseReCaptchaCompone2);\n\n    var _super2 = _createSuper(ReCaptcha2Component);\n\n    function ReCaptcha2Component(renderer, zone, injector, scriptService) {\n      var _this11;\n\n      _classCallCheck(this, ReCaptcha2Component);\n\n      _this11 = _super2.call(this, renderer, zone, injector, scriptService);\n      _this11.renderer = renderer;\n      _this11.zone = zone;\n      _this11.injector = injector;\n      _this11.scriptService = scriptService;\n      /**\r\n      * Name of the global expire callback\r\n      */\n\n      _this11.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';\n      /**\r\n      * Name of the global error callback\r\n      */\n\n      _this11.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';\n      /**\r\n       * Theme\r\n       */\n\n      _this11.theme = 'light';\n      /**\r\n      * Size\r\n      */\n\n      _this11.size = 'normal';\n      _this11.recaptchaType = ReCaptchaType.ReCaptcha2;\n      return _this11;\n    }\n\n    _createClass(ReCaptcha2Component, [{\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"ngOnChanges\", this).call(this, changes);\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        window[this.windowOnErrorCallbackProperty] = {};\n        window[this.windowOnExpireCallbackProperty] = {};\n      }\n    }, {\n      key: \"captchaSpecificSetup\",\n      value: function captchaSpecificSetup() {\n        this.registerCallbacks();\n      }\n      /**\r\n       * Gets reCaptcha properties\r\n      */\n\n    }, {\n      key: \"getCaptchaProperties\",\n      value: function getCaptchaProperties() {\n        var _this12 = this;\n\n        return {\n          'sitekey': this.siteKey,\n          'callback': function callback(response) {\n            return _this12.zone.run(function () {\n              return _this12.handleCallback(response);\n            });\n          },\n          'expired-callback': function expiredCallback() {\n            return _this12.zone.run(function () {\n              return _this12.handleExpireCallback();\n            });\n          },\n          'error-callback': function errorCallback() {\n            return _this12.zone.run(function () {\n              return _this12.handleErrorCallback();\n            });\n          },\n          'theme': this.theme,\n          'type': this.type,\n          'size': this.size,\n          'tabindex': this.tabIndex\n        };\n      }\n      /**\r\n       * Registers global callbacks\r\n      */\n\n    }, {\n      key: \"registerCallbacks\",\n      value: function registerCallbacks() {\n        window[this.windowOnErrorCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleErrorCallback\", this).bind(this);\n        window[this.windowOnExpireCallbackProperty] = _get(_getPrototypeOf(ReCaptcha2Component.prototype), \"handleExpireCallback\", this).bind(this);\n      }\n    }]);\n\n    return ReCaptcha2Component;\n  }(BaseReCaptchaComponentDirective);\n\n  /** @nocollapse */\n  ReCaptcha2Component.ɵfac = function ReCaptcha2Component_Factory(t) {\n    return new (t || ReCaptcha2Component)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(ScriptService));\n  };\n  /** @nocollapse */\n\n\n  ReCaptcha2Component.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ReCaptcha2Component,\n    selectors: [[\"ngx-recaptcha2\"]],\n    viewQuery: function ReCaptcha2Component_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.captchaWrapperElem = _t.first);\n      }\n    },\n    inputs: {\n      theme: \"theme\",\n      size: \"size\",\n      hl: \"hl\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(function () {\n        return ReCaptcha2Component;\n      }),\n      multi: true\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"captchaWrapperElem\", \"\"]],\n    template: function ReCaptcha2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ReCaptcha2Component;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ReCaptchaV3Service = /*#__PURE__*/(function () {\n  var ReCaptchaV3Service = /*#__PURE__*/function () {\n    function ReCaptchaV3Service(scriptService, zone) {\n      _classCallCheck(this, ReCaptchaV3Service);\n\n      this.scriptService = scriptService;\n      this.zone = zone;\n    }\n    /**\r\n     * Executes reCaptcha v3/Enterprise with given action and passes token via callback. You need to verify\r\n     * this callback in your backend to get meaningful results.\r\n     *\r\n     * For more information see https://developers.google.com/recaptcha/docs/v3\r\n     * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n     *\r\n     * @param siteKey Site key found in your google admin panel\r\n     * @param action Action to log\r\n     * @param callback Callback function to to handle token\r\n     * @param config Optional configuration like useGlobalDomain to be provided\r\n     * @param errorCallback Optional Callback function to handle errors\r\n     */\n\n\n    _createClass(ReCaptchaV3Service, [{\n      key: \"execute\",\n      value: function execute(siteKey, action, callback, config, errorCallback) {\n        this.executeAsPromise(siteKey, action, config).then(callback).catch(function (error) {\n          return errorCallback ? errorCallback(error) : console.error(error);\n        });\n      }\n      /**\r\n       * Executes reCaptcha v3/Enterprise with given action and returns token via Promise. You need to verify\r\n       * this token in your backend to get meaningful results.\r\n       *\r\n       * For more information see https://developers.google.com/recaptcha/docs/v3\r\n       * For enterprise see https://cloud.google.com/recaptcha-enterprise/docs\r\n       *\r\n       * @param siteKey Site key found in your google admin panel\r\n       * @param action Action to log\r\n       * @param config Optional configuration like useGlobalDomain to be provided\r\n       */\n\n    }, {\n      key: \"executeAsPromise\",\n      value: function executeAsPromise(siteKey, action, config) {\n        var _this13 = this;\n\n        return new Promise(function (resolve, reject) {\n          var configuration = config || {};\n\n          var onRegister = function onRegister(grecaptcha) {\n            _this13.zone.runOutsideAngular(function () {\n              try {\n                grecaptcha.execute(siteKey, {\n                  action: action\n                }).then(function (token) {\n                  return _this13.zone.run(function () {\n                    return resolve(token);\n                  });\n                });\n              } catch (error) {\n                reject(error);\n              }\n            });\n          };\n\n          _this13.scriptService.registerCaptchaScript(configuration, siteKey, onRegister);\n        });\n      }\n    }]);\n\n    return ReCaptchaV3Service;\n  }();\n\n  /** @nocollapse */\n  ReCaptchaV3Service.ɵfac = function ReCaptchaV3Service_Factory(t) {\n    return new (t || ReCaptchaV3Service)(i0.ɵɵinject(ScriptService), i0.ɵɵinject(i0.NgZone));\n  };\n  /** @nocollapse */\n\n\n  ReCaptchaV3Service.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ReCaptchaV3Service,\n    factory: ReCaptchaV3Service.ɵfac,\n    providedIn: 'root'\n  });\n  return ReCaptchaV3Service;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar NgxCaptchaModule = /*#__PURE__*/(function () {\n  var NgxCaptchaModule = /*#__PURE__*/_createClass(function NgxCaptchaModule() {\n    _classCallCheck(this, NgxCaptchaModule);\n  });\n\n  /** @nocollapse */\n  NgxCaptchaModule.ɵfac = function NgxCaptchaModule_Factory(t) {\n    return new (t || NgxCaptchaModule)();\n  };\n  /** @nocollapse */\n\n\n  NgxCaptchaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxCaptchaModule\n  });\n  /** @nocollapse */\n\n  NgxCaptchaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ScriptService, ReCaptchaV3Service],\n    imports: [CommonModule]\n  });\n  return NgxCaptchaModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BaseReCaptchaComponentDirective, InvisibleReCaptchaComponent, NgxCaptchaModule, ReCaptcha2Component, ReCaptchaType, ReCaptchaV3Service, ScriptService }; //# sourceMappingURL=ngx-captcha.mjs.map","map":null,"metadata":{},"sourceType":"module"}