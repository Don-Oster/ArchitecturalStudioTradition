{"ast":null,"code":"import { isPlatformServer } from '@angular/common';\nimport { PLATFORM_ID } from '@angular/core';\nimport { API_BASE_URL_TOKEN, SSR_API_BASE_URL_TOKEN } from './api-base-url.token';\nimport * as i0 from \"@angular/core\";\nconst DEFAULT_BASE_API_URL = '/api/';\nexport let WebApiUrlInterceptor = /*#__PURE__*/(() => {\n  class WebApiUrlInterceptor {\n    constructor(baseUrl, ssrBaseUrl, platformId) {\n      this.baseUrl = baseUrl;\n      this.ssrBaseUrl = ssrBaseUrl;\n      this.platformId = platformId;\n    }\n\n    intercept(request, next) {\n      request = request.clone({\n        url: this.processUrl(request.url)\n      });\n      return next.handle(request);\n    }\n\n    processUrl(url) {\n      const apiBaseUrl = isPlatformServer(this.platformId) ? this.ssrBaseUrl : this.baseUrl;\n\n      if (apiBaseUrl) {\n        const baseUrl = this.prepareUrl(apiBaseUrl);\n        url = url.replace(DEFAULT_BASE_API_URL, baseUrl);\n      }\n\n      return url;\n    }\n\n    prepareUrl(url) {\n      url = url.trim();\n\n      if (!url.startsWith('/') && !url.startsWith('http')) {\n        url = `/${url}`;\n      }\n\n      if (!url.endsWith('/')) {\n        url = `${url}/`;\n      }\n\n      return url;\n    }\n\n  }\n\n  WebApiUrlInterceptor.ɵfac = function WebApiUrlInterceptor_Factory(t) {\n    return new (t || WebApiUrlInterceptor)(i0.ɵɵinject(API_BASE_URL_TOKEN, 8), i0.ɵɵinject(SSR_API_BASE_URL_TOKEN, 8), i0.ɵɵinject(PLATFORM_ID));\n  };\n\n  WebApiUrlInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebApiUrlInterceptor,\n    factory: WebApiUrlInterceptor.ɵfac\n  });\n  return WebApiUrlInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}