{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { GoogleLoginProvider, FacebookLoginProvider } from \"@abacritt/angularx-social-login\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@archtradition-contract\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"@abacritt/angularx-social-login\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(accountsService, jwtHelper, externalAuthService) {\n      this.accountsService = accountsService;\n      this.jwtHelper = jwtHelper;\n      this.externalAuthService = externalAuthService;\n      this.authChange$ = new Subject();\n      this.externalAuthChange = new Subject();\n      this.authChanged = this.authChange$.asObservable();\n      this.externalAuthChanged = this.externalAuthChange.asObservable();\n\n      this.registerUser = command => {\n        return this.accountsService.registerUser(command);\n      };\n\n      this.loginUser = command => {\n        return this.accountsService.login(command);\n      };\n\n      this.forgotPassword = command => {\n        return this.accountsService.forgotPassword(command);\n      };\n\n      this.resetPassword = command => {\n        return this.accountsService.resetPassword(command);\n      };\n\n      this.twoStepVerification = command => {\n        return this.accountsService.twoStepVerification(command);\n      };\n\n      this.externalLogin = command => {\n        return this.accountsService.externalLogin(command);\n      };\n\n      this.confirmEmail = (token, email) => {\n        return this.accountsService.emailConfirmation(token, email);\n      };\n\n      this.sendAuthStateChangeNotification = isAuthenticated => {\n        this.authChange$.next(isAuthenticated);\n      };\n\n      this.logout = () => {\n        localStorage.removeItem(\"token\");\n        this.sendAuthStateChangeNotification(false);\n      };\n\n      this.isUserAuthenticated = () => {\n        const token = localStorage.getItem(\"token\");\n        return token && !this.jwtHelper.isTokenExpired(token);\n      };\n\n      this.isUserAdmin = () => {\n        const token = localStorage.getItem(\"token\");\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        const role = decodedToken['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'];\n        return role === 'Administrator';\n      };\n\n      this.signInWithFacebook = () => {\n        this.externalAuthService.signIn(FacebookLoginProvider.PROVIDER_ID);\n      };\n\n      this.signInWithGoogle = () => {\n        this.externalAuthService.signIn(GoogleLoginProvider.PROVIDER_ID);\n      };\n\n      this.refreshGoogleToken = () => {\n        this.externalAuthService.refreshAuthToken(GoogleLoginProvider.PROVIDER_ID);\n      };\n\n      this.signOutExternal = () => {\n        this.externalAuthService.signOut();\n      };\n\n      this.externalAuthService.authState.subscribe(user => {\n        this.externalAuthChange.next(user);\n        this.isExternalAuth = true;\n      });\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AccountsService), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.SocialAuthService));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}